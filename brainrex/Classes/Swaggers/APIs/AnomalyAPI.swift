//
// AnomalyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AnomalyAPI {
    /**
     Detects anomalies in historical data in batches. This endpoint uses your entire dataset as input
     
     - parameter request: (body) Time Series to be analyzed, with the following format. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func anomalyBatch(request: TimeSeries? = nil, completion: @escaping ((_ data: [Bool]?,_ error: Error?) -> Void)) {
        anomalyBatchWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Detects anomalies in historical data in batches. This endpoint uses your entire dataset as input
     - POST /anomaly/json/detect
     - The Anomaly Detect endpoint ingests time series data of all types, then monitors and detects abnormalities historical time series data. <br><br> Our AI selects from several models, choosing the one that fits the given data best, and we give you the avality to customize the sensitivy of the model. Our model has been trained to recognize anomalies in popular blockchain networks e.g. Bitcoin, Ethereum, learning from past events.
     - API Key:
       - type: apiKey x-api-key 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example=[ true, true ]}]
     
     - parameter request: (body) Time Series to be analyzed, with the following format. (optional)

     - returns: RequestBuilder<[Bool]> 
     */
    open class func anomalyBatchWithRequestBuilder(request: TimeSeries? = nil) -> RequestBuilder<[Bool]> {
        let path = "/anomaly/json/detect"
        let URLString = brainrexAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Bool]>.Type = brainrexAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
