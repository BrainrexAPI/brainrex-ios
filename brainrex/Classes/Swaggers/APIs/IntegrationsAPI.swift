//
// IntegrationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class IntegrationsAPI {
    /**
     Downloads candle format market data
     
     - parameter candleRequest: (body) The Get candles end point return market data in Open High Close Volume format. In order to use this endpoint you need to enter your API keys to your data provider in the console 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cryptoGetCandleData(candleRequest: CandleRequest, completion: @escaping ((_ data: CandleResponse?,_ error: Error?) -> Void)) {
        cryptoGetCandleDataWithRequestBuilder(candleRequest: candleRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Downloads candle format market data
     - POST /crypto/get_candles
     - Returns a list of candle data from specified market and data range
     - API Key:
       - type: apiKey x-api-key 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example=""}]
     
     - parameter candleRequest: (body) The Get candles end point return market data in Open High Close Volume format. In order to use this endpoint you need to enter your API keys to your data provider in the console 

     - returns: RequestBuilder<CandleResponse> 
     */
    open class func cryptoGetCandleDataWithRequestBuilder(candleRequest: CandleRequest) -> RequestBuilder<CandleResponse> {
        let path = "/crypto/get_candles"
        let URLString = brainrexAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: candleRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CandleResponse>.Type = brainrexAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Gets all coin pairs traded in specified exchange
     
     - parameter exchange: (body) Name of the cryptocurrency exchange 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cryptoGetExchangeAssets(exchange: Exchange, completion: @escaping ((_ data: ExchangeAssetsResponse?,_ error: Error?) -> Void)) {
        cryptoGetExchangeAssetsWithRequestBuilder(exchange: exchange).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets all coin pairs traded in specified exchange
     - POST /crypto/get_exchange_assets
     - This endpoint returns all the Available currency pairs
     - API Key:
       - type: apiKey x-api-key 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example=""}]
     
     - parameter exchange: (body) Name of the cryptocurrency exchange 

     - returns: RequestBuilder<ExchangeAssetsResponse> 
     */
    open class func cryptoGetExchangeAssetsWithRequestBuilder(exchange: Exchange) -> RequestBuilder<ExchangeAssetsResponse> {
        let path = "/crypto/get_exchange_assets"
        let URLString = brainrexAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: exchange)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ExchangeAssetsResponse>.Type = brainrexAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Returns the current state of the orderbook.
     
     - parameter orderbookRequest: (body) Exchange, trading pair and date rage for data 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cryptoGetOrderbooks(orderbookRequest: OrderbookRequest, completion: @escaping ((_ data: OrderbookResponse?,_ error: Error?) -> Void)) {
        cryptoGetOrderbooksWithRequestBuilder(orderbookRequest: orderbookRequest).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the current state of the orderbook.
     - POST /crypto/get_orderbooks
     - This endpoint returns the current state of the ordebook with a limit set by you. The maximun orderbook depth is 25.
     - API Key:
       - type: apiKey x-api-key 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example={
  "quote_trading_symbol" : "USD",
  "limit" : 2.0,
  "exchange" : "coinbasepro",
  "base_trading_symbol" : "BTC"
}}]
     
     - parameter orderbookRequest: (body) Exchange, trading pair and date rage for data 

     - returns: RequestBuilder<OrderbookResponse> 
     */
    open class func cryptoGetOrderbooksWithRequestBuilder(orderbookRequest: OrderbookRequest) -> RequestBuilder<OrderbookResponse> {
        let path = "/crypto/get_orderbooks"
        let URLString = brainrexAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderbookRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<OrderbookResponse>.Type = brainrexAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Gets all cryptocurrency exchanges supported by the Brainrex API
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cryptoGetSupportedExchanges(completion: @escaping ((_ data: SupportedExchanges?,_ error: Error?) -> Void)) {
        cryptoGetSupportedExchangesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets all cryptocurrency exchanges supported by the Brainrex API
     - GET /crypto/get_supported_exchanges
     - Returns a list of candle data from specified market and data range
     - API Key:
       - type: apiKey x-api-key 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example={
  "bestCaseFee" : 2.0,
  "worstCaseFee" : 2.0,
  "exchange" : "USD"
}}]

     - returns: RequestBuilder<SupportedExchanges> 
     */
    open class func cryptoGetSupportedExchangesWithRequestBuilder() -> RequestBuilder<SupportedExchanges> {
        let path = "/crypto/get_supported_exchanges"
        let URLString = brainrexAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<SupportedExchanges>.Type = brainrexAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Downloads candle format market data
     
     - parameter exchange: (body) Get ticker data from specified crypto exchange 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cryptoGetTicker(exchange: Exchange, completion: @escaping ((_ data: TickerResponse?,_ error: Error?) -> Void)) {
        cryptoGetTickerWithRequestBuilder(exchange: exchange).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Downloads candle format market data
     - POST /crypto/get_ticker
     - Returns a list of candle data from specified market and data range
     - API Key:
       - type: apiKey x-api-key 
       - name: APIKeyHeader
     - examples: [{contentType=application/json, example=""}]
     
     - parameter exchange: (body) Get ticker data from specified crypto exchange 

     - returns: RequestBuilder<TickerResponse> 
     */
    open class func cryptoGetTickerWithRequestBuilder(exchange: Exchange) -> RequestBuilder<TickerResponse> {
        let path = "/crypto/get_ticker"
        let URLString = brainrexAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: exchange)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TickerResponse>.Type = brainrexAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
